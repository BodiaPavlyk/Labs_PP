swagger: "2.0"
info:
  description: AD Service REST API
  version: "1.0.0"
  title: AD Service
  contact:
    email: bogdan2002mih@gmail.com
servers:
  - url: https://my-announcment.io/api/v1
  - url: http://my-announcment.io/api/v1
tags:
- name: "user"
  description: "Operations with Users"
- name: "announcement"
  description: "Operations with Messages"
  
  
paths:
  /user:
    post:
      tags:
        - user
      summary: creates user
      description: only logged in can do it
      operationId: createUser
      responses:
        default:
          description: successful operation
        
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
            application/xml:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
  '/user/{username}':
    get:
      tags:
        - user
      summary: Get user by user name
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: The name that needs to be fetched. Use user1 for testing.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be updated
          required: true
          schema:
            type: string
      responses:
        '400':
          description: invalid user
        '404':
          description: user does not exist
    delete:
      tags:
        - user
      summary: deletes
      description: only logged in users can do it
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: name to delete
          required: true
          schema:
            type: string
      responses:
        '400':
          description: invalid user
        '404':
          description: user does not exist
          
  /announcement:
    get:
      tags:
        - announcement
      summary: User`s announcements
      operationId: showAn
      description: Showing all your announcements
      responses:
        '200':
          description: search results by the theme
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Announcement"
        '400':
          description: bad input parameter
      security:
        - authentification:
            - read:an
            
    post:
      tags:
      - announcement
      summary: Add new announcement
      operationId: addAn
      requestBody:
        $ref: "#/components/requestBodies/Announcement"
      responses:
        "201":
          description: Announcement was created successfully
        "401":
          description: Access token is missing or invalid
      security:
      - authentification:
        - write:a
        
    put:
      tags:
      - announcement
      summary: Edit the announcement
      operationId: editAn
      responses:
        "200":
          description: Announcement was edited successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Announcement'
            application/xml:
              schema:
                $ref: '#/components/schemas/Announcement'
        "400":
          description: Invalid announcement id
        "404":
          description: Announcement was not found
      security:
      - authentification:
        - write:an
        
    delete:
      tags:
      - announcement
      summary: Delete the announcement
      operationId: delete An
      responses:
        "200":
          description: Announcement was deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Announcement'
            application/xml:
              schema:
                $ref: '#/components/schemas/Announcement'
        "400":
          description: Invalid ID
        "404":
          description: Announcement was not found
      security:
      - authentification:
        - delete:an
    
  /announcement/public:
    get:
      tags:
      - announcement
      summary: Public announcements
      description: Show all public announcements for all
      operationId: publicAn
      parameters: []
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Announcement"
      security:
       - authentification:
            - read:an
  
  /announcements/local:
    get:
      tags:
      - announcement
      summary: Local announcements
      description: Show all local announcements only for the users of site
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Announcement'
        "401":
          description: Access token is missing or invalid
      security:
      - authentification:
        - read:a

components:
  requestBodies:
      Announcement:
        description: Data of announcement object to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Announcement'
          application/xml:
            schema:
              $ref: '#/components/schemas/Announcement'
        required: true
      User:
        description: Creation of user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
        required: true
  securitySchemes:
    authentification:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'http://announcement.swagger.io/oauth/dialog'
          scopes:
            'write:an': write announcement in your account
            'read:an': read your announcement
            'delete:an': delete your announcement
  schemas:
    User:
      type: "object"
      required:
      - username
      - password
      - firstName
      - lastName
      - email
      properties:
        id:
          type: "integer"
          format: "int64"
        username:
          type: "string"
        firstName:
          type: "string"
        lastName:
          type: "string"
        email:
          type: "string"
        password:
          type: "string"
        location:
          type: "string"
      xml:
        name: "User"
    Announcement:
      type: "object"
      required:
      - name
      - theme
      - description
      - location
      properties:
        id:
          type: "integer"
          format: "int64"
        name:
          type: "string"
        theme:
          type: "string"
        type_of_announcment:
          type: "string"
        description:
          type: "string"
        location:
          type: "string"
        date_of_publication:
          type: "string"
      xml:
        name: "Announcment"
